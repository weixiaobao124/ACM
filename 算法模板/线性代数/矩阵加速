struct Matrix{
	typedef long long Data;
	const static int N = 3;
	const static Data Mod = 1e9 + 7;
	Data m[N][N];
	int n;
	Matrix(int _n = N){
		n = _n;
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				m[i][j] = 0;
	}
	void unit()
	{
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				if(i == j) m[i][j] = 1;
					else m[i][j] = 0;
	}
	Data* operator [](int r)
	{
		return m[r];
	}
	Matrix operator *(const Matrix& a)
	{
		Matrix res(n);
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				for(int k = 0; k < n; ++k)
				{
					(res.m[i][j] += m[i][k] * a.m[k][j]) %= Mod;
				}
		return res;
	}
	Matrix operator ^(long long k)
	{
		Matrix res(n);
		res.unit();
		while(k)
		{
			if(k & 1) res = res * (*this);
			(*this) = (*this) * (*this);
			k >>= 1;
		}
		return (*this) = res;
	}
};
